{{template "base" .}}
{{define "title"}}
    admin user
{{end}}

{{define "content"}}
    <h2 class="mt-5">admin user</h2>
    <hr>
    <form method="post" action="" name="user_form" class="d-block needs-validation" id="user_form" autocomplete="off" novalidate="">
        <div class="mb-3">
            <label for="first_name" class="form-label">first name</label>
            <input type="text" class="form-control" id="first_name" name="first_name" autocomplete="first_name-new" required="">
            <div class="invalid-feedback" id="first_name-help"></div>
        </div>
        <div class="mb-3">
            <label for="last_name" class="form-label">last name</label>
            <input type="text" class="form-control" id="last_name" name="last_name" autocomplete="last_name-new" required="">
            <div class="invalid-feedback" id="last_name-help"></div>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">email</label>
            <input type="email" class="form-control" id="email" name="email" autocomplete="email-new" required="">
            <div class="invalid-feedback" id="email-help"></div>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">password</label>
            <input type="password" class="form-control" id="password" name="password" autocomplete="password-new">
            <div class="invalid-feedback" id="password-help"></div>
        </div>
        <div class="mb-3">
            <label for="verify_password" class="form-label">verify password</label>
            <input type="password" class="form-control" id="verify_password" name="verify_password" autocomplete="verify_password-new">
            <div class="invalid-feedback" id="verify_password-help"></div>
        </div>
        <hr>
        <div class="float-start">
            <a class="btn btn-primary" href="javascript:void(0)" id="saveBtn" onclick="saveUser()">Save changes</a>
            <a class="btn btn-warning" href="/admin/all-users" id="cancelBtn">Cancel</a>
        </div>
        <div class="float-end">
            <a class="btn btn-danger d-none" href="javascript:void(0)" id="deleteBtn">Delete</a>
        </div>
    </form>
{{end}}

{{define "js"}}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let token = localStorage.getItem("token");
        let id = window.location.pathname.split("/").pop();
        let delBtn = document.getElementById("deleteBtn");

        document.addEventListener("DOMContentLoaded", function () {
            if (id !== "0") {
                if (id !== "{{.UserID}}") {
                    delBtn.classList.remove("d-none");
                }
                const requestOptions = {
                    method: 'post',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token,
                    },
                }

                fetch('{{.API}}/api/admin/all-users/' + id, requestOptions)
                    .then(response => response.json())
                    .then(function (data) {
                        if (data) {
                            document.getElementById("first_name").value = data.first_name;
                            document.getElementById("last_name").value = data.last_name;
                            document.getElementById("email").value = data.email;
                        }
                    })
            }
        })

        delBtn.addEventListener("click", function () {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to undo this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Delete User'
            }).then((result) => {
                if (result.isConfirmed) {
                    const requestOptions = {
                        method: 'post',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + token,
                        },
                    }

                    fetch("{{.API}}/api/admin/all-users/delete/" + id, requestOptions)
                        .then(response => response.json())
                        .then(data => {
                            if (data.error === false) {
                                let jsonData = {
                                    action: "deleteUser",
                                    user_id: parseInt(id, 10),
                                }
                                if (socket) {
                                    socket.send(JSON.stringify(jsonData));
                                }
                                location.href = "/admin/all-users";
                            }

                            Swal.fire("Error: " + data.message);
                        })
                }
            })
        })

        function saveUser() {
            let form = document.getElementById("user_form");
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return
            }
            form.classList.add("was-validated");

            if (document.getElementById("password").value !== document.getElementById("verify_password").value) {
                Swal.fire("password do not match");
                return
            }

            let payload = {
                id: parseInt(id, 10),
                first_name: document.getElementById("first_name").value,
                last_name: document.getElementById("last_name").value,
                email: document.getElementById("email").value,
                password: document.getElementById("password").value,
                verify_password: document.getElementById("verify_password").value,
            }

            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token,
                },
                body: JSON.stringify(payload),
            }

            fetch("{{.API}}/api/admin/all-users/edit/" + id, requestOptions)
                .then(response => response.json())
                .then(data => {
                    if (data.error === false) {
                        location.href = "/admin/all-users";
                    }

                    document.getElementById("user_form").classList.remove("was-validated");
                    Object.entries(data.errors).forEach((i) => {
                        const [key, value] = i;
                        document.getElementById(key).classList.add("is-invalid");
                        document.getElementById(key + "-help").classList.add("invalid-feedback");
                        document.getElementById(key + "-help").innerText = value;
                    })

                    Swal.fire("Error: " + data.message);
                })
        }
    </script>
{{end}}